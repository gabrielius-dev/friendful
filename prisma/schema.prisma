// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Like {
  id        String   @default(cuid()) @id
  type      LikeType
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
}

enum LikeType{
  like
  love
  care
  haha
  wow
  sad
  angry
}

model CommentLike{
  id        String   @default(cuid()) @id
  type      LikeType
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment   @relation(fields: [commentId], references: [id])
  commentId String
}

model Share{
  id        String   @default(cuid()) @id
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
}

model Save{
  id        String   @default(cuid()) @id
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
}

model Comment {
  id         String    @default(cuid()) @id
  comment    String
  post       Post?     @relation(fields: [postId], references: [id])
  postId     String?
  parent     Comment?  @relation("Comment_Children", fields: [parentId], references: [id])
  children   Comment[] @relation("Comment_Children")
  parentId   String?
  authorId   String
  likes      CommentLike[]
  likeCount     Int       @default(0)
  loveCount     Int       @default(0)
  careCount     Int       @default(0)
  hahaCount     Int       @default(0)
  wowCount      Int       @default(0)
  sadCount      Int       @default(0)
  angryCount    Int       @default(0)
}

model Post {
  id        String    @default(cuid()) @id
  content   String?
  images    Json[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  comments  Comment[]
  likes     Like[]
  saves     Save[]
  shares     Share[]
  likeCount     Int       @default(0)
  loveCount     Int       @default(0)
  careCount     Int       @default(0)
  hahaCount     Int       @default(0)
  wowCount      Int       @default(0)
  sadCount      Int       @default(0)
  angryCount    Int       @default(0)
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  password      String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  posts         Post[]
  likes         Like[]
  commentLikes  CommentLike[]
  emailVerified DateTime?
  image         String?
  avatarBackgroundColor String?
  saves         Save[]
  shares        Share[]
  accounts      Account[]
  sessions      Session[]
  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}